/************************************************************************/
/*                                                                      */
/*       Copyright 2007 by F. Heinrich, B. Seppke, Ullrich Koethe       */
/*                                                                      */
/*    This file is part of the VIGRA computer vision library.           */
/*    The VIGRA Website is                                              */
/*        http://hci.iwr.uni-heidelberg.de/vigra/                       */
/*    Please direct questions, bug reports, and contributions to        */
/*        ullrich.koethe@iwr.uni-heidelberg.de    or                    */
/*        vigra@informatik.uni-hamburg.de                               */
/*                                                                      */
/*    Permission is hereby granted, free of charge, to any person       */
/*    obtaining a copy of this software and associated documentation    */
/*    files (the "Software"), to deal in the Software without           */
/*    restriction, including without limitation the rights to use,      */
/*    copy, modify, merge, publish, distribute, sublicense, and/or      */
/*    sell copies of the Software, and to permit persons to whom the    */
/*    Software is furnished to do so, subject to the following          */
/*    conditions:                                                       */
/*                                                                      */
/*    The above copyright notice and this permission notice shall be    */
/*    included in all copies or substantial portions of the             */
/*    Software.                                                         */
/*                                                                      */
/*    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND    */
/*    EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES   */
/*    OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND          */
/*    NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT       */
/*    HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,      */
/*    WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING      */
/*    FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR     */
/*    OTHER DEALINGS IN THE SOFTWARE.                                   */                
/*                                                                      */
/************************************************************************/

#include <iostream>
#include <functional>
#include <cmath>
#include <list>
#include "vigra/unittest.hxx"

#include "vigra/multi_distance.hxx"
#include "vigra/vectorial_distance.hxx"
#include "vigra/vectorial_boundary_distance.hxx"
#include "vigra/distancetransform.hxx"
#include "vigra/functorexpression.hxx"

using namespace vigra;

static double volume_data[4200] = {
255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0,
0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 0.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0,
0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 0.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0,
0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0,
0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 255.0, 255.0, 0.0, 0.0, 255.0, 255.0, 255.0, 0.0, 0.0,
0.0, 0.0, 0.0, 255.0, 255.0, 0.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0,
0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0,
255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0,
255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0,
255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 0.0, 0.0,
255.0, 255.0, 255.0, 255.0, 0.0, 255.0, 0.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0,
0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0,
0.0, 255.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 255.0,
255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 0.0, 255.0, 0.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 255.0, 0.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0,
255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0,
255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0,
0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 255.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 255.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0,
255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0, 0.0,
0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0, 255.0, 255.0,
255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0, 255.0, 255.0,
255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 255.0, 255.0,
255.0, 255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
255.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 255.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
};

// reference squred distance for the foreground of above volume
static double ref_dist2[4200] = {
5.0, 4.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 4.0, 4.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 4.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0,
1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 1.0, 2.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 5.0, 6.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 2.0, 3.0, 5.0, 5.0,
0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 1.0, 2.0,
2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0,
1.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
1.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 1.0, 2.0, 3.0, 5.0, 6.0, 9.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 5.0, 6.0, 5.0, 4.0,
0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 5.0, 4.0, 4.0,
2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 3.0,
2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0,
1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0,
1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
1.0, 1.0, 2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 1.0, 2.0, 1.0, 2.0, 4.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 1.0, 2.0, 3.0, 2.0, 3.0, 5.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 2.0, 4.0, 5.0, 5.0, 5.0, 4.0,
0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 3.0, 5.0, 5.0, 4.0,
2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 5.0, 5.0,
2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 3.0,
2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 1.0,
2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0,
2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 1.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 2.0, 1.0, 2.0, 3.0, 4.0, 4.0,
0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 3.0, 2.0, 3.0, 2.0,
2.0, 1.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0, 5.0, 5.0,
2.0, 1.0, 1.0, 0.0, 0.0, 1.0, 2.0, 3.0, 5.0, 3.0,
2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 5.0, 4.0,
2.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 2.0, 3.0,
5.0, 4.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 1.0, 1.0, 1.0, 1.0,
0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 1.0, 2.0, 1.0,
1.0, 1.0, 0.0, 1.0, 2.0, 3.0, 4.0, 5.0, 4.0, 3.0,
1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 5.0, 6.0, 3.0, 2.0,
1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 2.0, 3.0, 6.0, 5.0,
2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 6.0,
8.0, 4.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 3.0, 2.0, 2.0, 1.0,
1.0, 0.0, 0.0, 0.0, 1.0, 2.0, 4.0, 5.0, 2.0, 1.0,
1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 4.0, 5.0, 6.0, 3.0,
1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 9.0,
5.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 1.0, 0.0,
0.0, 0.0, 0.0, 0.0, 2.0, 2.0, 3.0, 2.0, 1.0, 0.0,
1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 4.0, 4.0, 2.0,
1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 4.0,
4.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 1.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 1.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 2.0, 1.0,
1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0,
1.0, 1.0, 1.0, 1.0, 0.0, 1.0, 0.0, 1.0, 2.0, 3.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
0.0, 1.0, 0.0, 1.0, 1.0, 2.0, 3.0, 2.0, 0.0, 1.0,
1.0, 1.0, 1.0, 2.0, 1.0, 2.0, 1.0, 2.0, 5.0, 5.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
1.0, 1.0, 1.0, 2.0, 2.0, 3.0, 0.0, 1.0, 1.0, 1.0,
1.0, 1.0, 1.0, 2.0, 2.0, 3.0, 5.0, 5.0, 0.0, 1.0,
2.0, 2.0, 2.0, 3.0, 2.0, 3.0, 4.0, 5.0, 8.0, 8.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0,
2.0, 3.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0,
1.0, 2.0, 3.0, 5.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0,
1.0, 2.0, 2.0, 3.0, 5.0, 6.0, 0.0, 0.0, 1.0, 2.0,
2.0, 2.0, 3.0, 5.0, 5.0, 6.0, 8.0, 9.0, 1.0, 1.0,
2.0, 5.0, 5.0, 5.0, 5.0, 6.0, 8.0, 9.0, 12.0, 13.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0,
3.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0,
3.0, 5.0, 6.0, 9.0, 0.0, 1.0, 0.0, 1.0, 1.0, 2.0,
2.0, 3.0, 5.0, 6.0, 9.0, 11.0, 1.0, 1.0, 1.0, 2.0,
4.0, 5.0, 5.0, 6.0, 8.0, 9.0, 12.0, 14.0, 2.0, 2.0,
3.0, 5.0, 8.0, 8.0, 9.0, 11.0, 13.0, 14.0, 16.0, 16.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0,
0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0,
5.0, 6.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0,
5.0, 6.0, 9.0, 10.0, 0.0, 1.0, 1.0, 2.0, 2.0, 3.0,
5.0, 6.0, 9.0, 9.0, 9.0, 9.0, 1.0, 2.0, 2.0, 3.0,
5.0, 6.0, 8.0, 9.0, 10.0, 9.0, 9.0, 9.0, 4.0, 5.0,
4.0, 4.0, 5.0, 8.0, 10.0, 9.0, 9.0, 9.0, 9.0, 9.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 1.0, 1.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 1.0, 0.0, 1.0, 2.0, 3.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 3.0, 5.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 5.0, 6.0,
0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 5.0, 6.0,
8.0, 8.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 5.0,
6.0, 5.0, 5.0, 5.0, 1.0, 1.0, 1.0, 2.0, 4.0, 5.0,
8.0, 8.0, 5.0, 4.0, 4.0, 4.0, 2.0, 3.0, 2.0, 2.0,
3.0, 6.0, 6.0, 5.0, 5.0, 4.0, 4.0, 4.0, 5.0, 2.0,
1.0, 1.0, 2.0, 5.0, 5.0, 4.0, 4.0, 4.0, 4.0, 4.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0,
4.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
1.0, 2.0, 4.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 1.0, 1.0, 2.0, 5.0, 6.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 1.0, 2.0, 3.0, 6.0, 8.0, 0.0, 0.0,
0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 5.0, 6.0, 6.0, 5.0,
0.0, 1.0, 1.0, 1.0, 1.0, 2.0, 2.0, 3.0, 6.0, 5.0,
5.0, 4.0, 1.0, 1.0, 1.0, 2.0, 2.0, 3.0, 5.0, 6.0,
3.0, 2.0, 2.0, 2.0, 2.0, 2.0, 2.0, 3.0, 5.0, 6.0,
6.0, 5.0, 2.0, 1.0, 1.0, 1.0, 3.0, 2.0, 1.0, 1.0,
2.0, 5.0, 3.0, 2.0, 2.0, 1.0, 1.0, 1.0, 2.0, 1.0,
0.0, 0.0, 1.0, 4.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 4.0, 5.0,
8.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
4.0, 5.0, 8.0, 9.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
1.0, 2.0, 4.0, 5.0, 8.0, 9.0, 0.0, 0.0, 0.0, 0.0,
1.0, 1.0, 1.0, 2.0, 5.0, 6.0, 6.0, 5.0, 0.0, 0.0,
0.0, 1.0, 2.0, 2.0, 2.0, 3.0, 6.0, 6.0, 3.0, 2.0,
0.0, 1.0, 1.0, 2.0, 3.0, 5.0, 5.0, 6.0, 5.0, 3.0,
2.0, 1.0, 1.0, 2.0, 4.0, 5.0, 5.0, 6.0, 6.0, 5.0,
2.0, 1.0, 1.0, 1.0, 4.0, 4.0, 4.0, 4.0, 5.0, 5.0,
3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 1.0,
2.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 0.0,
0.0, 0.0, 1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 1.0, 4.0, 6.0,
5.0, 5.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0,
5.0, 5.0, 4.0, 4.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0,
2.0, 3.0, 6.0, 5.0, 4.0, 4.0, 0.0, 0.0, 0.0, 1.0,
1.0, 2.0, 3.0, 5.0, 8.0, 5.0, 4.0, 4.0, 0.0, 1.0,
1.0, 2.0, 3.0, 5.0, 5.0, 6.0, 6.0, 3.0, 2.0, 1.0,
1.0, 2.0, 2.0, 3.0, 6.0, 8.0, 8.0, 6.0, 3.0, 2.0,
1.0, 0.0, 2.0, 3.0, 5.0, 6.0, 8.0, 6.0, 5.0, 4.0,
2.0, 1.0, 0.0, 0.0, 4.0, 4.0, 4.0, 4.0, 4.0, 4.0,
2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0,
1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0, 5.0, 3.0,
2.0, 2.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 2.0, 3.0,
5.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 2.0,
5.0, 6.0, 5.0, 2.0, 1.0, 1.0, 1.0, 1.0, 1.0, 2.0,
2.0, 3.0, 6.0, 8.0, 5.0, 2.0, 1.0, 1.0, 1.0, 2.0,
2.0, 3.0, 5.0, 6.0, 9.0, 6.0, 3.0, 2.0, 1.0, 1.0,
2.0, 3.0, 5.0, 6.0, 6.0, 5.0, 5.0, 5.0, 2.0, 1.0,
0.0, 0.0, 5.0, 6.0, 8.0, 6.0, 5.0, 3.0, 2.0, 2.0,
1.0, 0.0, 0.0, 0.0, 4.0, 4.0, 4.0, 3.0, 2.0, 2.0,
1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0,
1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 4.0, 5.0, 2.0, 1.0,
1.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 5.0, 5.0,
2.0, 1.0, 0.0, 0.0, 1.0, 1.0, 1.0, 2.0, 2.0, 3.0,
5.0, 4.0, 2.0, 1.0, 0.0, 0.0, 2.0, 2.0, 2.0, 3.0,
5.0, 6.0, 5.0, 4.0, 2.0, 1.0, 0.0, 0.0, 4.0, 5.0,
5.0, 6.0, 6.0, 5.0, 5.0, 3.0, 2.0, 1.0, 0.0, 0.0,
5.0, 6.0, 8.0, 6.0, 3.0, 2.0, 3.0, 2.0, 1.0, 0.0,
0.0, 0.0, 6.0, 5.0, 5.0, 5.0, 2.0, 1.0, 1.0, 1.0,
1.0, 0.0, 0.0, 0.0, 3.0, 2.0, 2.0, 2.0, 1.0, 1.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 1.0, 1.0, 1.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
1.0, 1.0, 2.0, 4.0, 4.0, 5.0, 5.0, 4.0, 1.0, 0.0,
0.0, 0.0, 1.0, 1.0, 2.0, 4.0, 4.0, 5.0, 3.0, 2.0,
1.0, 0.0, 0.0, 0.0, 2.0, 2.0, 3.0, 5.0, 5.0, 5.0,
2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 5.0, 5.0, 5.0, 6.0,
6.0, 5.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 8.0, 8.0,
8.0, 6.0, 3.0, 2.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0,
9.0, 8.0, 6.0, 3.0, 2.0, 1.0, 1.0, 1.0, 0.0, 0.0,
0.0, 0.0, 5.0, 4.0, 3.0, 2.0, 1.0, 0.0, 1.0, 0.0,
0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 1.0, 1.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
4.0, 4.0, 5.0, 8.0, 9.0, 5.0, 2.0, 1.0, 1.0, 0.0,
0.0, 0.0, 4.0, 4.0, 5.0, 8.0, 9.0, 5.0, 2.0, 1.0,
1.0, 0.0, 0.0, 0.0, 5.0, 5.0, 6.0, 9.0, 6.0, 3.0,
1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 8.0, 8.0, 6.0,
3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 6.0,
5.0, 3.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
6.0, 5.0, 3.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 3.0, 2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
9.0, 9.0, 10.0, 13.0, 9.0, 4.0, 1.0, 0.0, 0.0, 0.0,
0.0, 0.0, 9.0, 9.0, 10.0, 9.0, 6.0, 4.0, 1.0, 0.0,
0.0, 0.0, 0.0, 0.0, 10.0, 10.0, 10.0, 6.0, 3.0, 2.0,
1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 9.0, 6.0, 5.0, 5.0,
2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 6.0, 3.0,
2.0, 2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
3.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 2.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
16.0, 16.0, 17.0, 13.0, 9.0, 4.0, 1.0, 0.0, 0.0, 0.0,
0.0, 0.0, 16.0, 16.0, 13.0, 8.0, 5.0, 4.0, 1.0, 0.0,
0.0, 0.0, 0.0, 0.0, 13.0, 10.0, 9.0, 5.0, 2.0, 1.0,
1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 8.0, 5.0, 4.0, 4.0,
1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 5.0, 2.0,
1.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
2.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0
};

//data and ref for boundaryMultiDistance
static double bndMltDst_data[2500] = {
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 0, 0, 0, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 201, 201, 201, 201, 201, 201, 201, 201, 201, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 0, 201, 201, 201, 0, 0, 201, 201, 201, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 201, 201, 201, 0, 201, 201, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 201, 201, 201, 0, 0, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 201, 201, 0, 0, 201, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 254, 254, 254, 254, 254, 254, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 0, 0, 254, 254, 254, 254, 254, 254, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 0, 254, 254, 254, 254, 254, 254, 254, 254, 0, 0, 0, 0, 0, 0, 0, 0, 225, 0, 255, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 254, 254, 254, 254, 254, 254, 254, 254, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 225, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 0, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 0, 0, 225, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 225, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 254, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 254, 254, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 254, 254, 254, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 255, 254, 254, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 169, 169, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 255, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 255, 255, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 255, 255, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 255, 255, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 255, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 255, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 116, 169, 116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 243, 243, 243, 243, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 116, 116, 116, 116, 116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 243, 243, 243, 243, 243, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 243, 243, 243, 243, 243, 243, 243, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    116, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 243, 243, 243, 243, 243, 243, 243, 243, 243, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 243, 243, 243, 243, 243, 243, 243, 243, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 243, 243, 243, 243, 243, 243, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 243, 243, 243, 243, 243, 243, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 243, 243, 243, 243, 243, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 243, 243, 243, 243, 243, 243, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 243, 243, 243, 243, 243, 243, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 243, 243, 243, 243, 243, 243, 243, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
    169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 169, 243, 243, 243, 243, 243, 243, 243, 243, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
};

static double bndMltDst_ref[2500] = {
    23.500000, 22.500000, 21.500000, 20.500000, 19.500000, 18.500000, 17.500000, 16.500000, 15.500000, 14.500000, 13.500000, 12.500000, 11.500000, 10.500000, 9.500000, 8.500000, 7.500000, 6.500000, 5.500000, 4.500000, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.201562, 4.031129, 4.500000, 4.500000, 4.500000, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 2.500000, 1.500000, 0.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000, 4.500000, 5.500000, 6.500000,
    23.500000, 22.500000, 21.500000, 20.500000, 19.500000, 18.500000, 17.500000, 16.500000, 15.500000, 14.500000, 13.500000, 12.500000, 11.500000, 10.500000, 9.500000, 8.500000, 7.500000, 6.500000, 5.500000, 4.500000, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 3.640055, 3.500000, 3.500000, 3.640055, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 2.692582, 1.802776, 1.118034, 0.500000, 1.118034, 1.802776, 2.692582, 3.640055, 4.609772, 5.590170, 6.576473,
    23.521267, 22.522211, 21.523243, 20.524376, 19.525623, 18.527008, 17.528547, 16.530275, 15.532225, 14.534442, 13.536986, 12.539936, 11.543396, 10.547511, 9.552486, 8.558621, 7.566373, 6.576473, 5.590170, 4.609772, 3.640055, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 1.500000, 2.500000, 2.692582, 2.500000, 2.500000, 2.692582, 3.201562, 2.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.201562, 2.500000, 1.802776, 1.500000, 1.802776, 2.500000, 3.201562, 4.031129, 4.924429, 5.852350, 6.800735,
    23.584953, 22.588715, 21.592823, 20.597330, 19.602295, 18.607794, 17.613914, 16.620770, 15.628500, 14.637281, 13.647344, 12.658989, 11.672618, 10.688779, 9.708244, 8.732124, 7.762087, 6.800735, 5.852350, 4.924429, 4.031129, 3.201562, 2.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 1.802776, 1.500000, 1.500000, 1.802776, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000, 3.201562, 2.692582, 2.500000, 2.692582, 3.201562, 3.905125, 4.609772, 5.408327, 6.264982, 6.800735,
    23.690716, 22.699120, 21.708294, 20.718349, 19.729420, 18.741665, 17.755281, 16.770510, 15.787653, 14.807093, 13.829317, 12.854960, 11.884864, 10.920165, 9.962429, 9.013878, 8.077747, 7.158911, 6.264982, 5.408327, 4.500000, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.118034, 1.802776, 1.118034, 0.500000, 0.500000, 1.118034, 1.802776, 1.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 3.640055, 4.031129, 3.640055, 3.500000, 3.640055, 4.031129, 4.609772, 5.315073, 5.500000, 5.590170, 5.852350,
    23.837996, 22.852789, 21.868927, 20.886599, 19.906029, 18.927494, 17.951323, 16.977926, 16.007811, 15.041609, 14.080128, 13.124405, 12.175796, 11.236102, 10.307764, 9.394147, 8.500000, 7.500000, 6.500000, 5.500000, 4.500000, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 0.500000, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 1.500000, 1.118034, 0.500000, 0.500000, 1.500000, 2.500000, 3.201562, 4.031129, 4.924429, 4.609772, 4.500000, 4.609772, 4.924429, 4.609772, 4.500000, 4.500000, 4.609772, 4.924429,
    24.026028, 23.048861, 22.073740, 21.100948, 20.130821, 19.163769, 18.200275, 17.240940, 16.286497, 15.337862, 14.396180, 13.462912, 12.539936, 11.543396, 10.547511, 9.552486, 8.558621, 7.566373, 6.576473, 5.590170, 4.609772, 3.640055, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 3.640055, 4.609772, 5.408327, 5.590170, 5.315073, 4.609772, 4.031129, 3.640055, 3.500000, 3.500000, 3.640055, 4.031129,
    24.253866, 23.286263, 22.321514, 21.360010, 20.402206, 19.448650, 18.500000, 17.557051, 16.620770, 15.628500, 14.637281, 13.647344, 12.658989, 11.672618, 10.688779, 9.708244, 8.732124, 7.762087, 6.800735, 5.852350, 4.924429, 4.031129, 3.201562, 2.500000, 1.802776, 1.500000, 0.500000, 0.500000, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 3.201562, 3.905125, 4.609772, 5.315073, 5.315073, 4.609772, 3.905125, 3.201562, 2.692582, 2.500000, 2.500000, 2.692582, 3.201562,
    24.520399, 23.563744, 22.610838, 21.662180, 20.718349, 19.729420, 18.741665, 17.755281, 16.770510, 15.787653, 14.807093, 13.829317, 12.854960, 11.884864, 10.920165, 9.962429, 9.013878, 8.077747, 7.158911, 6.264982, 5.408327, 4.609772, 3.905125, 3.201562, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 3.201562, 3.905125, 4.609772, 4.609772, 3.905125, 3.201562, 2.500000, 1.802776, 1.500000, 1.500000, 1.802776, 2.500000,
    24.824383, 23.837996, 22.852789, 21.868927, 20.886599, 19.906029, 18.927494, 17.951323, 16.977926, 16.007811, 15.041609, 14.080128, 13.124405, 12.175796, 11.236102, 10.307764, 9.394147, 8.500000, 7.632169, 6.800735, 6.020797, 5.315073, 4.609772, 3.640055, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 3.201562, 4.031129, 4.031129, 3.201562, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 1.118034, 1.802776,
    25.004999, 24.026028, 23.048861, 22.073740, 21.100948, 20.130821, 19.163769, 18.200275, 17.240940, 16.286497, 15.337862, 14.396180, 13.462912, 12.539936, 11.629704, 10.735456, 9.861542, 9.013878, 8.200610, 7.433034, 6.500000, 5.500000, 4.500000, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 0.500000, 0.500000, 1.500000, 1.500000, 1.500000, 1.500000, 1.118034, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 3.201562, 3.640055, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 1.500000,
    25.104780, 24.253866, 23.286263, 22.321514, 21.360010, 20.402206, 19.448650, 18.500000, 17.557051, 16.620770, 15.692355, 14.773287, 13.865424, 12.971122, 12.093387, 11.236102, 10.404326, 9.552486, 8.558621, 7.566373, 6.576473, 5.590170, 4.609772, 3.640055, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.500000, 2.500000, 2.500000, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 1.500000, 1.802776, 2.500000, 3.201562, 2.500000, 1.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 1.500000,
    24.397745, 23.690716, 22.983690, 22.299103, 21.569654, 20.718349, 19.780041, 18.848078, 17.923449, 17.007351, 16.101242, 15.206906, 14.326549, 13.462912, 12.619430, 11.672618, 10.688779, 9.708244, 8.732124, 7.762087, 6.800735, 5.852350, 4.924429, 4.031129, 3.201562, 2.500000, 1.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 3.500000, 3.201562, 2.500000, 1.500000, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776,
    23.690716, 22.983690, 22.276669, 21.569654, 20.886599, 20.155643, 19.448650, 18.741665, 18.062391, 17.414074, 16.560495, 15.692355, 14.807093, 13.829317, 12.854960, 11.884864, 10.920165, 9.962429, 9.013878, 8.077747, 7.158911, 6.264982, 5.408327, 4.500000, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.201562, 4.031129, 3.640055, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.500000, 1.802776, 1.500000, 1.802776, 1.802776, 1.118034, 0.500000, 1.118034, 1.802776, 2.500000,
    22.983690, 22.276669, 21.569654, 20.862646, 20.155643, 19.474342, 18.741665, 18.034689, 17.327723, 16.650826, 16.007811, 15.402922, 14.840822, 14.008925, 13.124405, 12.175796, 11.236102, 10.307764, 9.394147, 8.500000, 7.500000, 6.500000, 5.500000, 4.500000, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000, 4.500000, 4.031129, 3.201562, 2.500000, 1.802776, 1.500000, 0.500000, 0.500000, 1.500000, 1.118034, 0.500000, 1.118034, 1.802776, 1.802776, 1.500000, 1.802776, 2.500000, 3.201562,
    22.299103, 21.569654, 20.862646, 20.155643, 19.448650, 18.741665, 18.062391, 17.327723, 16.620770, 15.913831, 15.239751, 14.603082, 14.008925, 13.462912, 12.619430, 11.800424, 11.011357, 10.259142, 9.394147, 8.500000, 7.500000, 6.500000, 5.500000, 4.500000, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000, 4.500000, 4.609772, 3.905125, 3.201562, 2.500000, 1.500000, 0.500000, 0.500000, 1.118034, 0.500000, 0.500000, 0.500000, 1.500000, 2.500000, 2.500000, 2.692582, 3.201562, 3.905125,
    21.569654, 20.886599, 20.155643, 19.448650, 18.741665, 18.034689, 17.327723, 16.650826, 15.913831, 15.206906, 14.500000, 13.829317, 13.200378, 12.619430, 12.093387, 11.236102, 10.404326, 9.604687, 8.845903, 8.077747, 7.158911, 6.264982, 5.408327, 4.500000, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000, 4.500000, 5.315073, 4.609772, 3.640055, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000, 3.640055, 4.031129, 4.609772,
    20.862646, 20.155643, 19.474342, 18.741665, 18.034689, 17.327723, 16.620770, 15.913831, 15.239751, 14.500000, 13.793115, 13.086252, 12.419743, 11.800424, 11.236102, 10.735456, 9.861542, 9.013878, 8.200610, 7.433034, 6.726812, 5.852350, 4.924429, 4.031129, 3.201562, 2.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000, 4.500000, 4.609772, 4.031129, 3.640055, 3.201562, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000, 4.500000, 4.924429, 5.408327,
    20.155643, 19.448650, 18.741665, 18.062391, 17.327723, 16.620770, 15.913831, 15.206906, 14.500000, 13.829317, 13.086252, 12.379418, 11.672618, 11.011357, 10.404326, 9.861542, 9.394147, 8.500000, 7.632169, 6.800735, 6.020797, 5.315073, 4.609772, 3.640055, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000, 4.500000, 3.905125, 3.201562, 2.692582, 2.500000, 2.500000, 1.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000, 4.031129, 4.609772, 5.315073,
    19.474342, 18.741665, 18.034689, 17.327723, 16.650826, 15.913831, 15.206906, 14.500000, 13.793115, 13.086252, 12.419743, 11.672618, 10.965857, 10.259142, 9.604687, 9.013878, 8.500000, 8.077747, 7.158911, 6.264982, 5.408327, 4.609772, 3.905125, 3.201562, 2.500000, 1.500000, 0.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.201562, 3.640055, 3.201562, 2.500000, 1.802776, 1.500000, 1.500000, 1.500000, 0.500000, 0.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 2.692582, 3.201562, 3.905125, 4.609772,
    18.821529, 18.062391, 17.327723, 16.620770, 15.913831, 15.239751, 14.500000, 13.793115, 13.086252, 12.379418, 11.672618, 11.011357, 10.259142, 9.552486, 8.845903, 8.200610, 7.632169, 7.158911, 6.726812, 5.852350, 4.924429, 4.031129, 3.201562, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 2.692582, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 1.500000, 0.500000, 0.500000, 1.118034, 1.500000, 1.802776, 2.500000, 3.201562, 4.031129,
    18.200275, 17.414074, 16.650826, 15.913831, 15.206906, 14.500000, 13.829317, 13.086252, 12.379418, 11.672618, 10.965857, 10.259142, 9.604687, 8.845903, 8.139410, 7.433034, 6.800735, 6.264982, 5.852350, 5.315073, 4.609772, 3.640055, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 1.118034, 0.500000, 0.500000, 1.118034, 1.500000, 1.802776, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 3.640055,
    17.414074, 16.800297, 16.007811, 15.239751, 14.500000, 13.793115, 13.086252, 12.419743, 11.672618, 10.965857, 10.259142, 9.552486, 8.845903, 8.200610, 7.433034, 6.726812, 6.020797, 5.408327, 4.924429, 4.609772, 3.905125, 3.201562, 2.500000, 1.500000, 0.500000, 0.500000, 1.118034, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.118034, 0.500000, 0.500000, 1.118034, 1.500000, 1.500000, 1.500000, 1.802776, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000,
    16.560495, 16.007811, 15.402922, 14.603082, 13.829317, 13.086252, 12.379418, 11.672618, 11.011357, 10.259142, 9.552486, 8.845903, 8.139410, 7.433034, 6.800735, 6.020797, 5.315073, 4.609772, 4.031129, 3.640055, 3.201562, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 1.500000, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 2.500000, 2.500000, 2.692582, 3.201562, 2.500000, 1.802776, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000,
    15.628500, 15.206906, 14.603082, 14.008925, 13.200378, 12.419743, 11.672618, 10.965857, 10.259142, 9.604687, 8.845903, 8.139410, 7.433034, 6.726812, 6.020797, 5.408327, 4.609772, 3.905125, 3.201562, 2.692582, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 1.500000, 0.500000, 0.500000, 1.118034, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 3.201562, 3.500000, 3.500000, 3.640055, 3.640055, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000,
    14.637281, 14.326549, 13.829317, 13.200378, 12.619430, 11.800424, 11.011357, 10.259142, 9.552486, 8.845903, 8.200610, 7.433034, 6.726812, 6.020797, 5.315073, 4.609772, 4.031129, 3.201562, 2.500000, 1.802776, 1.500000, 1.118034, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 1.118034, 1.500000, 1.500000, 1.802776, 2.500000, 3.201562, 4.031129, 4.031129, 3.640055, 3.201562, 2.500000, 1.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 3.640055,
    13.647344, 13.462912, 12.971122, 12.419743, 11.800424, 11.236102, 10.404326, 9.604687, 8.845903, 8.139410, 7.433034, 6.800735, 6.020797, 5.315073, 4.609772, 3.905125, 3.201562, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 3.201562, 3.201562, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 3.640055, 3.201562, 2.692582, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 1.500000, 2.500000, 3.201562, 4.031129,
    12.658989, 12.539936, 12.093387, 11.629704, 11.011357, 10.404326, 9.861542, 9.013878, 8.200610, 7.433034, 6.726812, 6.020797, 5.408327, 4.609772, 3.905125, 3.201562, 2.500000, 1.802776, 1.500000, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 3.201562, 3.905125, 3.905125, 3.201562, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.201562, 2.500000, 1.802776, 1.500000, 1.118034, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 3.640055, 4.609772,
    11.672618, 11.543396, 11.236102, 10.735456, 10.259142, 9.604687, 9.013878, 8.500000, 7.632169, 6.800735, 6.020797, 5.315073, 4.609772, 4.031129, 3.201562, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.500000, 1.802776, 2.500000, 3.201562, 3.905125, 4.609772, 4.609772, 3.905125, 3.201562, 2.500000, 1.802776, 1.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 3.201562, 4.031129, 4.924429,
    10.688779, 10.547511, 10.404326, 9.861542, 9.394147, 8.845903, 8.200610, 7.632169, 7.158911, 6.264982, 5.408327, 4.609772, 3.905125, 3.201562, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 3.201562, 3.905125, 4.609772, 5.315073, 5.315073, 4.609772, 3.905125, 3.201562, 2.692582, 2.500000, 1.500000, 0.500000, 0.500000, 1.118034, 1.802776, 1.500000, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 3.201562, 3.905125, 4.609772, 5.408327,
    9.708244, 9.552486, 9.500000, 9.013878, 8.500000, 8.077747, 7.433034, 6.800735, 6.264982, 5.852350, 4.924429, 4.031129, 3.201562, 2.500000, 1.802776, 1.500000, 0.500000, 0.500000, 1.118034, 1.500000, 1.802776, 2.500000, 3.201562, 4.031129, 4.609772, 5.315073, 6.020797, 6.020797, 5.315073, 4.609772, 4.031129, 3.640055, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.500000, 1.802776, 2.500000, 3.201562, 3.905125, 4.609772, 5.315073, 6.020797,
    8.732124, 8.558621, 8.500000, 8.200610, 7.632169, 7.158911, 6.726812, 6.020797, 5.408327, 4.924429, 4.609772, 3.640055, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.500000, 2.500000, 2.692582, 3.201562, 3.905125, 4.609772, 5.408327, 6.020797, 6.500000, 6.020797, 5.408327, 4.924429, 4.609772, 3.905125, 3.201562, 2.500000, 1.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 2.692582, 3.201562, 3.905125, 4.609772, 5.315073, 6.020797, 6.726812,
    7.762087, 7.566373, 7.500000, 7.433034, 6.800735, 6.264982, 5.852350, 5.315073, 4.609772, 4.031129, 3.640055, 3.201562, 2.500000, 1.500000, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 3.640055, 4.031129, 4.609772, 5.315073, 5.590170, 5.500000, 5.500000, 5.315073, 4.609772, 4.031129, 3.640055, 3.201562, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.500000, 1.802776, 2.500000, 3.201562, 3.640055, 4.031129, 4.609772, 5.315073, 6.020797, 6.726812, 7.433034,
    6.800735, 6.576473, 6.500000, 6.500000, 6.020797, 5.408327, 4.924429, 4.609772, 3.905125, 3.201562, 2.692582, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 1.500000, 1.802776, 2.500000, 3.201562, 4.031129, 4.924429, 5.408327, 4.924429, 4.609772, 4.500000, 4.500000, 4.500000, 3.905125, 3.201562, 2.692582, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 2.692582, 3.201562, 3.905125, 4.609772, 4.924429, 5.408327, 6.020797, 6.726812, 7.433034, 8.139410,
    5.852350, 5.590170, 5.500000, 5.500000, 5.315073, 4.609772, 4.031129, 3.640055, 3.201562, 2.500000, 1.802776, 1.500000, 1.118034, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 3.201562, 3.905125, 4.609772, 5.315073, 4.609772, 4.031129, 3.640055, 3.500000, 3.500000, 3.500000, 3.201562, 2.500000, 1.802776, 1.500000, 1.118034, 0.500000, 0.500000, 1.118034, 1.500000, 1.802776, 2.500000, 3.201562, 3.640055, 4.031129, 4.609772, 5.315073, 5.852350, 6.264982, 6.800735, 7.433034, 8.139410, 8.845903,
    4.924429, 4.609772, 4.500000, 4.500000, 4.500000, 3.905125, 3.201562, 2.692582, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 3.201562, 4.031129, 4.609772, 4.924429, 4.609772, 3.905125, 3.201562, 2.692582, 2.500000, 2.500000, 2.500000, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 2.692582, 3.201562, 3.905125, 4.609772, 4.924429, 5.408327, 6.020797, 6.726812, 7.158911, 7.632169, 8.200610, 8.845903, 9.552486,
    4.031129, 3.640055, 3.500000, 3.500000, 3.500000, 3.201562, 2.500000, 1.802776, 1.500000, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 3.201562, 3.905125, 4.609772, 4.609772, 4.031129, 3.640055, 3.201562, 2.500000, 1.802776, 1.500000, 1.500000, 1.500000, 1.500000, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 3.201562, 3.640055, 4.031129, 4.609772, 5.315073, 5.852350, 6.264982, 6.800735, 7.433034, 8.077747, 8.500000, 9.013878, 9.604687, 10.259142,
    3.201562, 2.692582, 2.500000, 2.500000, 2.500000, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.500000, 1.802776, 2.500000, 3.201562, 3.905125, 4.609772, 4.031129, 3.640055, 3.201562, 2.692582, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 1.118034, 1.500000, 1.802776, 2.500000, 3.201562, 3.905125, 4.609772, 4.924429, 5.408327, 6.020797, 6.726812, 7.158911, 7.632169, 8.200610, 8.845903, 9.394147, 9.861542, 10.404326, 11.011357,
    2.500000, 1.802776, 1.500000, 1.500000, 1.500000, 1.500000, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 1.500000, 2.500000, 2.692582, 3.201562, 3.905125, 4.609772, 3.905125, 3.201562, 2.692582, 2.500000, 1.802776, 1.500000, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 1.500000, 2.500000, 2.692582, 3.201562, 3.905125, 4.609772, 5.315073, 5.852350, 6.264982, 6.800735, 7.433034, 8.077747, 8.500000, 9.013878, 9.604687, 10.259142, 10.735456, 11.236102, 11.800424,
    1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 1.118034, 0.500000, 1.118034, 1.802776, 2.692582, 3.640055, 4.031129, 4.609772, 4.031129, 3.201562, 2.500000, 1.802776, 1.500000, 1.118034, 0.500000, 0.500000, 0.500000, 1.118034, 1.500000, 1.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000, 4.031129, 4.609772, 5.315073, 6.020797, 6.726812, 7.158911, 7.632169, 8.200610, 8.845903, 9.394147, 9.861542, 10.404326, 11.011357, 11.629704, 12.093387, 12.619430,
    1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 1.500000, 1.802776, 2.500000, 3.201562, 4.031129, 4.924429, 4.609772, 3.640055, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000, 4.500000, 5.408327, 6.020797, 6.726812, 7.433034, 8.077747, 8.500000, 9.013878, 9.604687, 10.259142, 10.735456, 11.236102, 11.800424, 12.419743, 12.971122, 13.462912,
    0.500000, 0.500000, 1.118034, 1.500000, 1.500000, 1.500000, 1.500000, 1.802776, 2.500000, 2.500000, 2.692582, 3.201562, 3.905125, 4.609772, 5.408327, 4.500000, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 0.500000, 1.118034, 1.500000, 1.802776, 2.500000, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000, 4.500000, 5.500000, 6.500000, 7.433034, 8.139410, 8.845903, 9.394147, 9.861542, 10.404326, 11.011357, 11.629704, 12.093387, 12.619430, 13.200378, 13.829317, 14.326549,
    0.500000, 1.118034, 1.802776, 2.500000, 2.500000, 2.500000, 2.500000, 2.692582, 3.201562, 3.500000, 3.640055, 4.031129, 4.609772, 5.315073, 5.500000, 4.500000, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 2.692582, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 3.640055, 4.609772, 5.590170, 6.576473, 7.566373, 8.558621, 9.552486, 10.259142, 10.735456, 11.236102, 11.800424, 12.419743, 12.971122, 13.462912, 14.008925, 14.603082, 15.206906,
    1.500000, 1.802776, 2.500000, 3.201562, 3.500000, 3.500000, 3.500000, 3.640055, 4.031129, 4.500000, 4.609772, 4.924429, 5.408327, 6.020797, 5.590170, 4.609772, 3.640055, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 1.500000, 2.500000, 3.201562, 2.500000, 1.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 3.201562, 4.031129, 4.924429, 5.852350, 6.800735, 7.762087, 8.732124, 9.708244, 10.688779, 11.629704, 12.093387, 12.619430, 13.200378, 13.829317, 14.326549, 14.840822, 15.402922, 16.007811,
    2.500000, 2.692582, 3.201562, 3.905125, 4.500000, 4.500000, 4.500000, 4.609772, 4.924429, 5.408327, 5.590170, 5.852350, 6.264982, 6.020797, 5.315073, 4.609772, 3.905125, 3.201562, 2.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 1.500000, 2.500000, 3.201562, 3.905125, 4.609772, 5.408327, 6.264982, 7.158911, 8.077747, 9.013878, 9.962429, 10.920165, 11.884864, 12.854960, 13.462912, 14.008925, 14.603082, 15.206906, 15.692355, 16.224981, 16.800297,
    3.500000, 3.640055, 4.031129, 4.609772, 5.315073, 5.500000, 5.500000, 5.590170, 5.852350, 6.264982, 6.576473, 6.800735, 6.264982, 5.408327, 4.609772, 3.905125, 3.201562, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 1.500000, 2.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 3.640055, 4.609772, 5.315073, 6.020797, 6.800735, 7.632169, 8.500000, 9.394147, 10.307764, 11.236102, 12.175796, 13.124405, 14.080128, 14.840822, 15.402922, 16.007811, 16.560495, 17.066048, 17.613914,
    4.500000, 4.609772, 4.924429, 5.408327, 6.020797, 6.500000, 6.500000, 6.576473, 6.800735, 7.158911, 7.566373, 6.800735, 5.852350, 4.924429, 4.031129, 3.201562, 2.500000, 1.802776, 1.118034, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 1.500000, 2.500000, 3.201562, 4.031129, 4.924429, 5.852350, 6.726812, 7.433034, 8.200610, 9.013878, 9.861542, 10.735456, 11.629704, 12.539936, 13.462912, 14.396180, 15.337862, 16.224981, 16.800297, 17.414074, 17.923449, 18.445868,
    5.500000, 5.590170, 5.852350, 6.264982, 6.800735, 7.433034, 7.500000, 7.566373, 7.762087, 8.077747, 7.566373, 6.576473, 5.590170, 4.609772, 3.640055, 2.692582, 1.802776, 1.118034, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.692582, 3.640055, 4.609772, 5.408327, 6.264982, 7.158911, 8.077747, 8.845903, 9.604687, 10.404326, 11.236102, 12.093387, 12.971122, 13.865424, 14.773287, 15.692355, 16.620770, 17.557051, 18.200275, 18.794947, 19.293781,
    6.500000, 6.576473, 6.800735, 7.158911, 7.632169, 8.200610, 8.500000, 8.558621, 8.732124, 8.500000, 7.500000, 6.500000, 5.500000, 4.500000, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.118034, 1.802776, 2.500000, 3.201562, 2.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.201562, 4.031129, 4.924429, 5.852350, 6.800735, 7.632169, 8.500000, 9.394147, 10.259142, 11.011357, 11.800424, 12.619430, 13.462912, 14.326549, 15.206906, 16.101242, 17.007351, 17.923449, 18.848078, 19.602295, 20.155643,
    7.500000, 7.566373, 7.762087, 8.077747, 8.500000, 9.013878, 9.500000, 9.552486, 9.500000, 8.500000, 7.500000, 6.500000, 5.500000, 4.500000, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.201562, 3.500000, 2.500000, 1.500000, 0.500000, 0.500000, 1.500000, 2.500000, 3.500000, 4.500000, 5.408327, 6.264982, 7.158911, 8.077747, 9.013878, 9.861542, 10.735456, 11.629704, 12.419743, 13.200378, 14.008925, 14.840822, 15.692355, 16.560495, 17.442764, 18.337120, 19.241882, 20.155643, 21.005951,
};

template<class IMG, class DESIRED>
void testVectorialDist2SquaredDist(const IMG& img, const DESIRED& desired, bool invert,
                                   ArrayVector<double> pixelPitch = ArrayVector<double>(), double epsilon = -1.0)
{
    if(pixelPitch.size() == 0) {
        pixelPitch.resize(IMG::actual_dimension);
        std::fill(pixelPitch.begin(), pixelPitch.end(), 1.0);
    }
    else if(pixelPitch.size() != IMG::actual_dimension) {
        throw std::runtime_error("pixelPitch has wrong size");
    }
    using functor::Arg1;
    typedef vigra::MultiArray<IMG::actual_dimension, vigra::TinyVector<double, IMG::actual_dimension> > VecImage;
    VecImage vecImg(img.shape()); 
    separableMultiVectorialDist(srcMultiArrayRange(img), destMultiArray(vecImg), invert, pixelPitch);
    typename IMG::matrix_type distImg(img.shape());
    transformMultiArray(srcMultiArrayRange(vecImg), destMultiArray(distImg), squaredNorm(Arg1()));
    if(epsilon < 0) {
        shouldEqualSequence(distImg.begin(),distImg.end(), desired.begin());
    }
    else {
        shouldEqualSequenceTolerance(distImg.begin(),distImg.end(), desired.begin(), epsilon);
    }
}

struct MultiDistanceTest
{
    typedef vigra::MultiArray<3,int> IntVolume;
    typedef vigra::MultiArray<3,vigra::TinyVector<int,3> > IntVecVolume;
    typedef vigra::MultiArray<3,double> DoubleVolume; 
    typedef vigra::MultiArray<3,vigra::TinyVector<double,3> > DoubleVecVolume;
    typedef vigra::MultiArray<2,vigra::TinyVector<double,2> > DoubleVecImage;
    typedef vigra::MultiArray<2,double> Double2DArray;
    typedef vigra::DImage Image;
    typedef vigra::MultiArrayView<2,Image::value_type> ImageView;
    typedef vigra::TinyVector<int,3> IntVec;

#if 1
    enum { WIDTH    =   15,  // 
           HEIGHT   =   15,  // Volume-Dimensionen
           DEPTH    =   15}; //
#else
    enum { WIDTH    =   4,  // 
           HEIGHT   =   4,  // Volume-Dimensionen
           DEPTH    =   1}; //
#endif

    std::list<std::list<IntVec> > pointslists;
    std::vector<Image> images;
    Double2DArray img2;
    DoubleVolume volume;
    IntVolume shouldVol;

    MultiDistanceTest()
    : images(3, Image(7,7)), img2(Double2DArray::difference_type(7,1)),
      volume(IntVolume::difference_type(WIDTH,HEIGHT,DEPTH)),
      shouldVol(IntVolume::difference_type(WIDTH,HEIGHT,DEPTH))
    {
        std::list<IntVec> temp;
        temp.push_back(IntVec(      0,        0,       0));
        temp.push_back(IntVec(WIDTH-1,        0,       0));
        temp.push_back(IntVec(      0, HEIGHT-1,       0));
        temp.push_back(IntVec(WIDTH-1, HEIGHT-1,       0));
        temp.push_back(IntVec(      0,        0, DEPTH-1));
        temp.push_back(IntVec(WIDTH-1,        0, DEPTH-1));
        temp.push_back(IntVec(      0, HEIGHT-1, DEPTH-1));
        temp.push_back(IntVec(WIDTH-1, HEIGHT-1, DEPTH-1));
        pointslists.push_back(temp);

        temp.clear();
        temp.push_back(IntVec(      0, HEIGHT/2, DEPTH/2));
        temp.push_back(IntVec(WIDTH/2, HEIGHT/2,       0));
        temp.push_back(IntVec(WIDTH/2,        0, DEPTH/2));
        temp.push_back(IntVec(WIDTH-1, HEIGHT/2, DEPTH/2));
        temp.push_back(IntVec(WIDTH/2, HEIGHT/2, DEPTH-1));
        temp.push_back(IntVec(WIDTH/2, HEIGHT-1, DEPTH/2));
        pointslists.push_back(temp);
    

        static const double in[] = {
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};

        {
            Image::ScanOrderIterator i = images[0].begin();
            Image::ScanOrderIterator end = images[0].end();
            Image::Accessor acc = images[0].accessor();
            const double * p = in;

            for(; i != end; ++i, ++p)
            {
                acc.set(*p, i);
            }
        }
        
        static const unsigned char in2[] = {
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1};

        {
            Image::ScanOrderIterator i = images[1].begin();
            Image::ScanOrderIterator end = images[1].end();
            Image::Accessor acc = images[1].accessor();
            const unsigned char * p = in2;

            for(; i != end; ++i, ++p)
            {
                acc.set(*p, i);
            }
        }

        static const unsigned char in3[] = {
            1, 1, 1, 1, 1, 1, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 1, 1, 1, 1, 1, 1};

        {
            Image::ScanOrderIterator i = images[2].begin();
            Image::ScanOrderIterator end = images[2].end();
            Image::Accessor acc = images[2].accessor();
            const unsigned char * p = in3;

            for(; i != end; ++i, ++p)
            {
                acc.set(*p, i);
            }
        }

        static const double in2d[] = {0, 0, 0, 1, 0, 0, 0};
        const double * p=in2d;
        for(Double2DArray::iterator iter=img2.begin(); iter!=img2.end(); ++iter, ++p){
            *iter=*p;
        }
    }

    void testDistanceVolumes()
    {    
        DoubleVolume desired(volume);
        for(std::list<std::list<IntVec> >::iterator list_iter=pointslists.begin(); 
                                          list_iter!=pointslists.end(); ++list_iter)
        {
            IntVec temp;
            for(int z=0; z<DEPTH; ++z)
                for(int y=0; y<HEIGHT; ++y)
                    for(int x=0; x<WIDTH; ++x){
                        temp = IntVec(x,y,z);
                        int tempVal=10000000;
                        for(std::list<IntVec>::iterator iter=(*list_iter).begin(); iter!=(*list_iter).end(); ++iter){
                            if((temp-*iter).squaredMagnitude()<tempVal){
                                tempVal = (temp-*iter).squaredMagnitude();
                            }
                        }
                        desired(x,y,z)=tempVal;
                    }

            for(DoubleVolume::iterator vol_iter = volume.begin(); vol_iter != volume.end(); ++vol_iter)
                *vol_iter=0;
            for(std::list<IntVec>::iterator iter=(*list_iter).begin(); iter!=(*list_iter).end(); ++iter){
                *(volume.traverser_begin()+*iter)=1;
            }

            DoubleVolume volumeWorkingCopy(volume);
            
            separableMultiDistSquared(srcMultiArrayRange(volumeWorkingCopy),
                                      destMultiArray(volumeWorkingCopy),
                                      true);
            shouldEqualSequence(volumeWorkingCopy.begin(),volumeWorkingCopy.end(),desired.begin());
          
            {
                //test vectorial distance
                using functor::Arg1;
                DoubleVecVolume vecVolume(volume.shape()); 
                separableMultiVectorialDist(srcMultiArrayRange(volume), destMultiArray(vecVolume), true);
                DoubleVolume distVolume(volume.shape());
                transformMultiArray(srcMultiArrayRange(vecVolume), destMultiArray(distVolume), squaredNorm(Arg1()));
                shouldEqualSequence(distVolume.begin(),distVolume.end(),desired.begin());
            }
            {
                using functor::Arg1;
                //test vectorial boundary distance
                Double2DArray labels(Shape2(50,50), bndMltDst_data);
                DoubleVecImage vecVolume2(labels.shape());
                boundaryMultiVectorialDist(labels, vecVolume2);
                Double2DArray distVolume2(labels.shape());
                transformMultiArray(srcMultiArrayRange(vecVolume2), destMultiArray(distVolume2), squaredNorm(Arg1()));
                for (int k = 0; k < labels.size(); k++)
                {
                    shouldEqualTolerance(sqrt(distVolume2[k]) - bndMltDst_ref[k], 0.0, 0.15034);
                }
            }
        }

        typedef MultiArrayShape<3>::type Shape;
        MultiArrayView<3, double> vol(Shape(12,10,35), volume_data);
        {
            //test squared distance
            MultiArray<3, double> res(vol.shape());
            separableMultiDistSquared(srcMultiArrayRange(vol), destMultiArray(res), false);
            shouldEqualSequence(res.data(), res.data()+res.elementCount(), ref_dist2);
        }
        {
            //test vectorial distance
            using functor::Arg1;
            DoubleVecVolume vecVolume(vol.shape()); 
            separableMultiVectorialDist(srcMultiArrayRange(vol), destMultiArray(vecVolume), false);
            DoubleVolume distVolume(vol.shape());
            transformMultiArray(srcMultiArrayRange(vecVolume), destMultiArray(distVolume), squaredNorm(Arg1()));
            shouldEqualSequence(distVolume.begin(),distVolume.end(),ref_dist2);
        }
    }

    void testDistanceAxesPermutation()
    {
        typedef MultiArrayShape<3>::type Shape;
        MultiArrayView<3, double> vol(Shape(12,10,35), volume_data);
        
        MultiArray<3, double> res1(vol.shape()), res2(vol.shape());
        MultiArrayView<3, double, StridedArrayTag> pvol(vol.transpose()), pres2(res2.transpose());
        
        separableMultiDistSquared(vol, res1, true);
        separableMultiDistSquared(pvol, pres2, true);
                
        shouldEqualSequence(res1.data(), res1.data()+res1.elementCount(), res2.data());
        
        separableMultiDistSquared(srcMultiArrayRange(vol), destMultiArray(res1), false);
        testVectorialDist2SquaredDist(vol, res1, false);
        separableMultiDistSquared(srcMultiArrayRange(pvol), destMultiArray(pres2), false);
        testVectorialDist2SquaredDist(pvol, pres2, false);
                
        shouldEqualSequence(res1.data(), res1.data()+res1.elementCount(), res2.data());
    }

    void testDistanceVolumesAnisoptopic()
    {    
        double epsilon = 1e-14;
        TinyVector<double, 3> pixelPitch(1.2, 1.0, 2.4);
        
        DoubleVolume desired(volume);
        for(std::list<std::list<IntVec> >::iterator list_iter=pointslists.begin(); 
                                          list_iter!=pointslists.end(); ++list_iter){

            for(DoubleVolume::iterator vol_iter = volume.begin(); vol_iter != volume.end(); ++vol_iter)
                *vol_iter=0;
            for(std::list<IntVec>::iterator iter=(*list_iter).begin(); iter!=(*list_iter).end(); ++iter)
                *(volume.traverser_begin()+*iter)=1;

            IntVec temp;
            for(int z=0; z<DEPTH; ++z)
                for(int y=0; y<HEIGHT; ++y)
                {
                    for(int x=0; x<WIDTH; ++x)
                    {
                        temp = IntVec(x,y,z);
                        double tempVal=10000000.0;
                        for(std::list<IntVec>::iterator iter=(*list_iter).begin(); iter!=(*list_iter).end(); ++iter){
                            double squaredMag = (pixelPitch*(temp-*iter)).squaredMagnitude();
                            if(squaredMag<tempVal){
                                tempVal = squaredMag;
                            }
                        }
                        desired(x,y,z)=tempVal;
                    }
                }

            DoubleVolume volumeCopy(volume);
            separableMultiDistSquared(srcMultiArrayRange(volume),
                                      destMultiArray(volume),
                                      true, pixelPitch);
            shouldEqualSequenceTolerance(volume.begin(),volume.end(),desired.begin(), epsilon);
            
            ArrayVector<double> pixelPitchVector;
            pixelPitchVector.resize(pixelPitch.size());
            std::copy(pixelPitch.begin(), pixelPitch.end(), pixelPitchVector.begin());
            testVectorialDist2SquaredDist(volumeCopy, desired, true, pixelPitchVector, epsilon);
        }
    }

    void distanceTransform2DCompare()
    {
        for(unsigned int k=0; k<images.size(); ++k)
        {
            Image res(images[k]);
            ImageView img_array(ImageView::difference_type(images[k].width(), images[k].height()), &images[k](0,0));

            distanceTransform(srcImageRange(images[k]), destImage(res), 0.0, 2);

            ImageView::matrix_type img_array_copy(img_array);
            
            separableMultiDistance(srcMultiArrayRange(img_array),
                                   destMultiArray(img_array),
                                   true);
           
            DoubleVecImage vec_image(img_array_copy.shape());
            separableMultiVectorialDist(srcMultiArrayRange(img_array_copy),
                                        destMultiArray(vec_image),
                                        true);
            vigra::MultiArray<2, double> img_array_dist(img_array_copy.shape());
            using functor::Arg1;
            transformMultiArray(srcMultiArrayRange(vec_image), destMultiArray(img_array_dist), norm(Arg1()));

            Image::Iterator i = res.upperLeft();
            Image::Accessor acc = res.accessor();

            int x,y;

            for(y=0; y<7; ++y)
            {
                for(x=0; x<7; ++x)
                {
                    double dist_old = acc(i, vigra::Diff2D(x,y));

                    shouldEqualTolerance(dist_old, img_array(x,y), 1e-7);
                    shouldEqualTolerance(dist_old, img_array_dist(x,y), 1e-7);
                }
            }
        }
    }

    void distanceTest1D()
    {
        vigra::MultiArray<2,double> res(img2);
        
        static const int desired[] = {3, 2, 1, 0, 1, 2, 3};
        separableMultiDistance(img2, res, true);
        shouldEqualSequence(res.begin(), res.end(), desired);
       
        std::vector<int> desiredVector(7);
        for(int i=0; i<7; ++i) { desiredVector[i] = desired[i]*desired[i]; };
        testVectorialDist2SquaredDist(img2, desiredVector, true);
    }
};

//new MultiDist
struct boundaryMultiDistanceTest
{
    typedef vigra::MultiArray<3,int> IntVolume;
    typedef vigra::MultiArray<3,double> DoubleVolume; 
    typedef vigra::MultiArray<2,double> Double2DArray;
    typedef vigra::MultiArray<1,double> Double1DArray;
    typedef vigra::DImage Image;
    typedef vigra::MultiArrayView<2,Image::value_type> ImageView;
    typedef vigra::TinyVector<int,3> IntVec;

#if 1
    enum { WIDTH    =   50,  // 
           HEIGHT   =   50,  // Volume-Dimensionen
           DEPTH    =   1}; //
#else
    enum { WIDTH    =   4,  // 
           HEIGHT   =   4,  // Volume-Dimensionen
           DEPTH    =   1}; //
#endif

    std::list<std::list<IntVec> > pointslists;
    std::vector<Image> images;
    Double1DArray img2;
    DoubleVolume volume;
    IntVolume shouldVol;

    boundaryMultiDistanceTest()
    : images(3, Image(7,7)), img2(Shape1(7)),
      volume(IntVolume::difference_type(WIDTH,HEIGHT,DEPTH)),
      shouldVol(IntVolume::difference_type(WIDTH,HEIGHT,DEPTH))
    {
        std::list<IntVec> temp;
        temp.push_back(IntVec(      0,        0,       0));
        temp.push_back(IntVec(WIDTH-1,        0,       0));
        temp.push_back(IntVec(      0, HEIGHT-1,       0));
        temp.push_back(IntVec(WIDTH-1, HEIGHT-1,       0));
        temp.push_back(IntVec(      0,        0, DEPTH-1));
        temp.push_back(IntVec(WIDTH-1,        0, DEPTH-1));
        temp.push_back(IntVec(      0, HEIGHT-1, DEPTH-1));
        temp.push_back(IntVec(WIDTH-1, HEIGHT-1, DEPTH-1));
        pointslists.push_back(temp);

        temp.clear();
        temp.push_back(IntVec(      0, HEIGHT/2, DEPTH/2));
        temp.push_back(IntVec(WIDTH/2, HEIGHT/2,       0));
        temp.push_back(IntVec(WIDTH/2,        0, DEPTH/2));
        temp.push_back(IntVec(WIDTH-1, HEIGHT/2, DEPTH/2));
        temp.push_back(IntVec(WIDTH/2, HEIGHT/2, DEPTH-1));
        temp.push_back(IntVec(WIDTH/2, HEIGHT-1, DEPTH/2));
        pointslists.push_back(temp);
    

        static const double in[] = {
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 1.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 1.0, 0.0,
            0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};

        {
            Image::ScanOrderIterator i = images[0].begin();
            Image::ScanOrderIterator end = images[0].end();
            Image::Accessor acc = images[0].accessor();
            const double * p = in;

            for(; i != end; ++i, ++p)
            {
                acc.set(*p, i);
            }
        }
        
        static const unsigned char in2[] = {
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1};

        {
            Image::ScanOrderIterator i = images[1].begin();
            Image::ScanOrderIterator end = images[1].end();
            Image::Accessor acc = images[1].accessor();
            const unsigned char * p = in2;

            for(; i != end; ++i, ++p)
            {
                acc.set(*p, i);
            }
        }

        static const unsigned char in3[] = {
            1, 1, 1, 1, 1, 1, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 0, 0, 0, 0, 0, 1,
            1, 1, 1, 1, 1, 1, 1};

        {
            Image::ScanOrderIterator i = images[2].begin();
            Image::ScanOrderIterator end = images[2].end();
            Image::Accessor acc = images[2].accessor();
            const unsigned char * p = in3;

            for(; i != end; ++i, ++p)
            {
                acc.set(*p, i);
            }
        }

        static const double in2d[] = {0, 0, 0, 1, 0, 0, 0};
        const double * p=in2d;
        for(Double1DArray::iterator iter=img2.begin(); iter!=img2.end(); ++iter, ++p){
            *iter=*p;
        }
    }

    void testDistanceVolumes()
    {    
        typedef MultiArrayShape<2>::type Shape;
        MultiArrayView<2, double> vol(Shape(50,50), bndMltDst_data), ref(Shape(50,50), bndMltDst_ref);    
        MultiArray<2, double> res(vol.shape());

        boundaryMultiDistance(vol, res);
        int x,y;

        for(y=0; y<50; ++y)
        {
            for(x=0; x<50; ++x)
            {
                shouldEqualTolerance(res(x,y)-ref(x,y), 0.0, 0.20383);
            }
        }
    }

    void distanceTest1D()
    {
        Double1DArray res(img2);
        
        static const float desired[] = {2.5, 1.5, 0.5, 0.5, 0.5, 1.5, 2.5};
        boundaryMultiDistance(img2, res);


        shouldEqualSequence(res.begin(), res.end(), desired);
    }

};
//

struct SimpleAnalysisTestSuite
: public vigra::test_suite
{
    SimpleAnalysisTestSuite()
    : vigra::test_suite("SimpleAnalysisTestSuite")
    {
        add( testCase( &MultiDistanceTest::testDistanceVolumes));
        add( testCase( &MultiDistanceTest::testDistanceAxesPermutation));
        add( testCase( &MultiDistanceTest::testDistanceVolumesAnisoptopic));
        add( testCase( &MultiDistanceTest::distanceTransform2DCompare));
        add( testCase( &MultiDistanceTest::distanceTest1D));
        add( testCase( &boundaryMultiDistanceTest::distanceTest1D));
        add( testCase( &boundaryMultiDistanceTest::testDistanceVolumes));
    }
};

int main(int argc, char ** argv)
{
    SimpleAnalysisTestSuite test;

    int failed = test.run(vigra::testsToBeExecuted(argc, argv));

    std::cout << test.report() << std::endl;
    return (failed != 0);
}

